<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommandFilter</name>
    </assembly>
    <members>
        <member name="T:CommandFilter.CommandFilter">
            <summary>
            Represents the customization filter. Implement <see cref="M:CommandFilter.CommandFilter.OnExecuteCommand(System.String)"/> to
            execute your filtering logic
            </summary>
            <remarks>Customization filters must be registered via <see cref="M:FrameworkApplication.RegisterCustomizationFilter"/></remarks>
        </member>
        <member name="M:CommandFilter.CommandFilter.Register">
            <summary>
            Register for command filtering. Customization filters must be registered before they are
            called.
            </summary>
        </member>
        <member name="M:CommandFilter.CommandFilter.UnRegister">
            <summary>
            Unregister for command filtering
            </summary>
        </member>
        <member name="P:CommandFilter.CommandFilter.PopMessageBox">
            <summary>
            Gets or sets the 'Pop Message Box' property. True will pop a message box if the
            clicked command is filtered
            </summary>
        </member>
        <member name="P:CommandFilter.CommandFilter.IsRegistered">
            <summary>
            Gets the flag indicating whether the filter is registered
            </summary>
        </member>
        <member name="P:CommandFilter.CommandFilter.IsFiltering">
            <summary>
            Gets whether we are filtering
            </summary>
        </member>
        <member name="M:CommandFilter.CommandFilter.StartFiltering">
            <summary>
            Start filtering
            </summary>
        </member>
        <member name="M:CommandFilter.CommandFilter.StopFiltering">
            <summary>
            Stop filtering
            </summary>
        </member>
        <member name="M:CommandFilter.CommandFilter.OnExecuteCommand(System.String)">
            <summary>
            Implement your custom filtering logic here. OnCommandExecute is called every time
            a command is clicked on the UI.
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:CommandFilter.CommandFilter.Dispose">
            <summary>
            Implements IDisposable
            </summary>
        </member>
        <member name="T:CommandFilter.CommandFilterDockPaneView">
            <summary>
            Interaction logic for CommandFilterDockPaneView.xaml
            </summary>
            <summary>
            CommandFilterDockPaneView
            </summary>
        </member>
        <member name="M:CommandFilter.CommandFilterDockPaneView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:CommandFilter.CommandFilterDockPaneViewModel.Show">
            <summary>
            Show the DockPane.
            </summary>
        </member>
        <member name="P:CommandFilter.CommandFilterDockPaneViewModel.IsFiltering">
            <summary>
            Gets and sets the IsFiltering status
            </summary>
        </member>
        <member name="P:CommandFilter.CommandFilterDockPaneViewModel.IsFilteringText">
            <summary>
            Gets the Filtering text
            </summary>
        </member>
        <member name="P:CommandFilter.CommandFilterDockPaneViewModel.ShowMessageBox">
            <summary>
            Gets and sets whether to show a message box when a command is filtered
            </summary>
        </member>
        <member name="P:CommandFilter.CommandFilterDockPaneViewModel.PopMessageBoxTooltip">
            <summary>
            Gets a string indicating if we are popping a message box or not
            on the filter
            </summary>
        </member>
        <member name="P:CommandFilter.CommandFilterDockPaneViewModel.CommandFilters">
            <summary>
            Gets the current command filters
            </summary>
        </member>
        <member name="M:CommandFilter.CommandFilterDockPaneViewModel.ToggleFiltering">
            <summary>
            Toggle the filtering status
            </summary>
        </member>
        <member name="T:CommandFilter.CommandFilterDockPane_ShowButton">
            <summary>
            Button implementation to show the DockPane.
            </summary>
        </member>
        <member name="P:CommandFilter.Models.CommandFilterItem.ClickCount">
            <summary>
            Gets and sets the number of times a command has been clicked during
            filtering.
            </summary>
        </member>
        <member name="M:CommandFilter.Models.CommandFilterItem.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:CommandFilter.Module1">
            <summary>
            This sample shows how to implement and register a command filter. Any ICommand (IPluginWrapper);
            can be filtered. Simply return false from the filter to prevent execution of the relevant command
            </summary>    
            <remarks>    
            1. In Visual Studio click the Build menu. Then select Build Solution.
            1. Click Start button to open ArcGIS Pro.
            1. ArcGIS Pro will open. 
            1. Open any project file. 
            1. Click on the Add-in tab on the ribbon and then on the "Show Filter Dockpane" button.  
            1. Command Filter Dock Pane opens.  
            1. Check the 'Filtering is ON' checkbox now click any command button on the ArcGIS Pro ribbon.  Including the "Show Filter Dockpane" button.  
            1. See the 'Command clicked:' list showing the command text.  
            1. Use the 'Popup Messagebox Filter' to show a message box when the command is intercepted.  
            ![UI](Screenshots/Usage.png)
            </remarks>
        </member>
        <member name="P:CommandFilter.Module1.Current">
            <summary>
            Retrieve the singleton instance to this module here
            </summary>
        </member>
        <member name="M:CommandFilter.Module1.PackUriForResource(System.String,System.String)">
            <summary>
            Formats a URI given an image name and an optional Image path component.
            </summary>
            <param name="resourceName"></param>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:CommandFilter.Module1.CanUnload">
            <summary>
            Called by Framework when ArcGIS Pro is closing
            </summary>
            <returns>False to prevent Pro from closing, otherwise True</returns>
        </member>
    </members>
</doc>
